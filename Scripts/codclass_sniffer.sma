/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <engine>
#include <hamsandwich>
#include <codmod>

#define nazwa "Sniffer"
#define opis "Co runde dostaje 2 kamery militarne, ktore mozesz wystrzelic"
#define grawitacja 10
#define zdrowie 10
#define kondycja 0
#define inteligencja 30
#define wytrzymalosc 0

#define DMG_BULLET (1<<1) 

#define ILOSC_KAMER 2
#define WYTRZYMALOSC_KAMER 500

#define ZADANIE_AKTYWUJ -95967210

new sprite_blast;

new ilosc_kamer_gracza[33];

new bool:ma_klase[33]
new kamera_gracza[33];

public plugin_init()
 {
	register_plugin(nazwa, "1.0", "QTM_Peyote");
	
	cod_register_class(nazwa, opis, grawitacja, zdrowie, kondycja, inteligencja, wytrzymalosc);
	
	register_event("ResetHUD", "ResetHUD", "abe");
	register_event("HLTV", "NowaRunda", "a", "1=0", "2=0");
	register_touch("camera", "*", "DotykKamery");
	register_forward(FM_UpdateClientData, "UpdateData", 1);
	register_forward(FM_PlayerPreThink, "PreThink");
	RegisterHam(Ham_TraceAttack, "worldspawn", "TraceAttack");
	register_event("CurWeapon","CurWeapon","be", "1=1");
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	register_clcmd("radio2", "ZmienKamere");
	register_event("DeathMsg", "Death", "ade");
}

public plugin_precache()
{
	sprite_blast = precache_model("sprites/dexplo.spr");
	precache_model("models/QTM_CodMod/camera.mdl");
	precache_sound("weapons/mine_charge.wav");
	precache_sound("weapons/mine_activate.wav");
	precache_sound("weapons/mine_deploy.wav");
}

public cod_class_enabled(id)
{
	kamera_gracza[id] = 0;
	ma_klase[id] = true;
	ResetHUD(id);
}

public cod_class_disabled(id)
	ma_klase[id] = false;

public PreThink(id)
{
	if(!ma_klase[id]) return;
	
	if(!pev_valid(kamera_gracza[id])) return;
	
	set_pev(id, pev_button, 0);
	set_pev(id, pev_velocity , Float:{0.0, 0.0, 0.0});
}

public cod_class_skill_used(id)
{	
	if (!ilosc_kamer_gracza[id])
	{
		client_print(id, print_center, "Wykorzystales juz wszystkie kamery!");
		return PLUGIN_CONTINUE;
	}
	
	if (is_user_alive(id))
	{
		ilosc_kamer_gracza[id]--;

		new Float: Origin[3], Float: vAngle[3], Float: Velocity[3];
		
		pev(id, pev_v_angle, vAngle);
		pev(id, pev_origin , Origin);
	
		new Ent = create_entity("info_target");
		
		set_pev(Ent, pev_classname, "camera");
		entity_set_model(Ent, "models/QTM_CodMod/camera.mdl");
	
		vAngle[0] *= -1.0;
	
		set_pev(Ent, pev_origin, Origin);
		set_pev(Ent, pev_angles, vAngle);
	
		set_pev(Ent, pev_effects, 2);
		set_pev(Ent, pev_solid, SOLID_BBOX);
		set_pev(Ent, pev_movetype, MOVETYPE_FLY);
		set_pev(Ent, pev_owner, id);
		set_pev(Ent, pev_health, WYTRZYMALOSC_KAMER.0);
		set_pev(Ent, pev_takedamage, DAMAGE_YES);
		
		velocity_by_aim(id, 1000 , Velocity);
		set_pev(Ent, pev_velocity ,Velocity);
		
		COD_MSG_SKILL_D;
		show_hudmessage(id, "Aby przelaczac miedzy kamerami^nuzyj komendy radio2")
		client_cmd(id, "spk events/search.wav")
		ShowAmmo(id);
	}	
	return PLUGIN_CONTINUE;
}

public DotykKamery(ent, id)
{
	new attacker = pev(ent, pev_owner);
	
	if(is_user_alive(id))
		cod_inflict_damage(attacker, id, 10.0, 1.0, ent, (1<<24));
	else if(!pev_valid(id))
	{
		set_pev(ent, pev_movetype, MOVETYPE_NONE);
		
		new Float:CameraOrigin[3], Float:CameraAngleVector[3];
	
		pev(ent, pev_origin, CameraOrigin);
		pev(ent, pev_angles, CameraAngleVector);
		angle_vector(CameraAngleVector, ANGLEVECTOR_FORWARD, CameraAngleVector);
	
		for(new i = 0; i < 3; i++)
			CameraOrigin[i] += -CameraAngleVector[i]*5.0;
			
		set_pev(ent, pev_origin, CameraOrigin);
		emit_sound(ent, CHAN_VOICE, "weapons/mine_charge.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
		emit_sound(ent, CHAN_ITEM, "weapons/mine_deploy.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
		set_task(3.5, "Aktywuj", ent+ZADANIE_AKTYWUJ);
	}
}	

public Aktywuj(ent)
{
	ent -= ZADANIE_AKTYWUJ;
	if(pev_valid(ent))
		emit_sound(ent, CHAN_VOICE, "weapons/mine_activate.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
}

public ResetHUD(id)
	ilosc_kamer_gracza[id] = ILOSC_KAMER;

public Death()
	client_disconnect(read_data(2));
	
public client_disconnect(id)
{
	new ent = -1;
	while((ent = find_ent_by_owner(0, "camera", id)) > 0)
		remove_entity(ent);
}

public NowaRunda()
	remove_entity_name("camera");

public UpdateData(id, sw, cd_handle)
{
	if(!ma_klase[id]) return;
	
	if(!pev_valid(kamera_gracza[id]) || pev(kamera_gracza[id], pev_movetype) != MOVETYPE_NONE || task_exists(kamera_gracza[id]+ZADANIE_AKTYWUJ))
		return;
	
	new Float:CameraOrigin[3], Float:vAngle[3];
	
	pev(kamera_gracza[id], pev_origin, CameraOrigin);
	pev(id, pev_v_angle, vAngle);
	vAngle[1] -= 180.0;
	set_pev(kamera_gracza[id], pev_angles, vAngle);
	
	set_cd(cd_handle, CD_Origin, CameraOrigin);
	set_cd(cd_handle, CD_Velocity, Float:{0.0, 0.0, 0.0});
	set_cd(cd_handle, CD_ViewModel, "");
	set_cd(cd_handle, CD_ViewOfs, Float:{0.0, 0.0, 0.0});
}

public ZmienKamere(id)
{
	if(!ma_klase[id]) return PLUGIN_CONTINUE;
	
	kamera_gracza[id] = find_ent_by_owner(kamera_gracza[id], "camera", id);
	return PLUGIN_HANDLED;
}

public TraceAttack(this, idattacker, Float:damage, Float:direction[3], tracehandle, damagebits)
{
	new Float:Origin[3];
	
	get_tr2(tracehandle, TR_vecEndPos, Origin);
	
	new entlist[2];
	new numfound = find_sphere_class(0, "camera", 15.0, entlist, 1, Origin);
	
	if(numfound)
	{
		new owner = pev(entlist[0], pev_owner);
		
		if(get_user_team(idattacker) == get_user_team(owner))
			return;
			
		new Health = pev(entlist[0], pev_health);
		if(Health < damage)
		{
			new iOrigin[3];
			FVecIVec(Origin, iOrigin);
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
			write_byte(TE_EXPLOSION);
			write_coord(iOrigin[0]);
			write_coord(iOrigin[1]);
			write_coord(iOrigin[2]);
			write_short(sprite_blast);
			write_byte(32); 
			write_byte(20); 
			write_byte(0);
			message_end();
			
			new entlist2[33];
			new numfound2 = find_sphere_class(entlist[0], "player", 190.0, entlist2, 32);
			
			
			for (new i=0; i < numfound2; i++)
			{		
				new pid = entlist2[i];
				
				if (!is_user_alive(pid) || get_user_team(owner) == get_user_team(pid))
					continue;
				cod_inflict_damage(owner, pid, 50.0, 0.89, entlist[0], (1<<24));
			}
		}
		ExecuteHam(Ham_TakeDamage, entlist[0], idattacker, idattacker, damage, damagebits);
	}
}

ShowAmmo(id)
{ 
    new ammo[51] 
    formatex(ammo, 50, "Liczba Kamer Militarnych: %i/2",ilosc_kamer_gracza[id])

    message_begin(MSG_ONE, get_user_msgid("StatusText"), {0,0,0}, id) 
    write_byte(0) 
    write_string(ammo) 
    message_end() 
} 
