/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <torreinc>
#include <fakemeta>
#include <hamsandwich>
#include <acg>

#define MAX 20

new nazwa[] = "Monika";
new nazwa_kodowa[] = "Polenizujmy";
new opis[] = "Moze wykonac furie (wieksze obrazenia przez 5 sek.)";
new grawitacja = 0;
new inteligencja = 10;
new zdrowie = 5;
new wytrzymalosc = 0;
new kondycja = 10;
new przeladowanie = 0;
new regeneracja = 5;

new bool:ma_klase[MAX + 1];
new uzyl_furii[MAX + 1];
new bool:uzywa[MAX + 1];

new Count[MAX + 1];
new mapname[32];

public plugin_init() {
	
	register_plugin(nazwa, "0.69", "ToRRent")
	RegisterHam(Ham_Spawn, "player", "Spawn", 1);
	
	cod_register_class(nazwa, opis, grawitacja, zdrowie, kondycja, inteligencja, wytrzymalosc, przeladowanie, regeneracja, nazwa_kodowa);
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	register_forward(FM_CmdStart, "CmdStart");
	get_mapname(mapname, 31)
}

public plugin_precache()
{	
	precache_generic("gfx/hp02.tga")
}

public cod_class_enabled(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		return COD_CONTINUE;
	}
	else
	{
		acg_drawtext(id, 0.04, 0.69, "Aby uruchomic furie (Wieksze dmg, mniejszy rozrzut)^n wcisnij USE (domyslnie E)", 0, 212, 255, 255, 0.0, 2.5, 4.5, 0, TS_NONE, 0, 1, 11)
	}
	//COD_MSG_SKILL_D;
	//show_hudmessage(id, "Aby uruchomic furie wcisnij USE (domyslnie E)");
	ma_klase[id] = true;
	uzyl_furii[id] = false;
	
	return COD_CONTINUE;
}

public cod_class_disabled(id)
{
	ma_klase[id] = false;
}

public Spawn(id)
{
	if(!is_user_alive(id) || !is_user_connected(id))
		return PLUGIN_CONTINUE;
		
	if(ma_klase[id])
	{
		uzyl_furii[id] = false;
		uzywa[id] = false;
	}
	
	return PLUGIN_CONTINUE;
}

public cod_class_skill_used(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		client_print(id, print_center, "Umiejetnosci klas nie sa dostepne w tym trybie gry !");
	}
	else
	{
		if(uzyl_furii[id])
		{
			client_print(id, print_center, "Furii mozna uzyc tylko raz na runde !");
		}
		else
		{
			Start(id);
			uzyl_furii[id] = true;
			uzywa[id] = true;
			acg_drawtext(id, -1.00, 0.25, "CHCESZ ZE MNA POLENIZOWAC^nW ODNIESIENIU DO MOJEJ FURII ?!", 255, 50, 100, 225, 0.2, 4.0, 5.0, 0, TS_NONE, 0, 0, 12)
			//COD_MSG_NEWS_P;
			//show_hudmessage(id, "CHCESZ ZE MNA POLENIZOWAC^nW ODNIESIENIU DO MOJEJ FURII ?!");
			acg_drawtga(id, "gfx/hp02.tga", 255, 255, 255, 250, 0.0, 0.0, 0, FX_FADE_INTERVAL, 1.0, 3.0, 1.5, 5.0, DRAW_ADDITIVE, 1, 1, -1);
		}
	}
}

public CmdStart(id, uc_handle)
{
	if(ma_klase[id] && uzywa[id] && get_uc(uc_handle, UC_Buttons) & IN_ATTACK)
	{
		new Float:punchangle[3]
		pev(id, pev_punchangle, punchangle)
		for(new i=0; i<3;i++) 
				punchangle[i]*=0.6;
		set_pev(id, pev_punchangle, punchangle)
	}
}


public Start(id)
{
	Count[id] = 4
        
	if(task_exists(id + 3691))
	{
		remove_task(id + 3691)
	}
	set_hudmessage(0, 255, 100, 0.03, 0.76, 2, 0.02, 1.0, 0.01, _, 1);
	show_hudmessage(id, "Furia wylaczy sie za 5 sek.");
	set_task(1.0, "CDN", id + 3691, _, _, "b")
        
	return PLUGIN_CONTINUE
}
public CDN(task_id)
{
	new id = task_id - 3691
        
	set_hudmessage(0, 255, 100, 0.03, 0.76, 2, 0.02, 1.0, 0.01, _, 1);
	show_hudmessage(id, "Furia wylaczy sie za %d sek.", Count[id]);
        
	Count[id] --; 
	//engfunc(EngFunc_SetClientMaxspeed, id, SZYBKOSC_GRACZA(id)+100.0);
        
	if(Count[id] <= 0)
	{
		uzywa[id] = false;
		if(task_exists(task_id))
		{
			acg_drawtext(id, -1.00, 0.25, "NO TO JEDYNECZKA !", 255, 50, 100, 225, 0.2, 0.3, 1.0, 0, TS_NONE, 0, 0, 12)
			//show_hudmessage(id, "NO TO JEDYNECZKA !");
			remove_task(task_id)
			//engfunc(EngFunc_SetClientMaxspeed, id, SZYBKOSC_GRACZA(id));
		}
	}
}

public TakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
		return HAM_IGNORED;
		
	if(!is_user_connected(idattacker))
		return HAM_IGNORED;
	
	if(ma_klase[idattacker] && uzywa[idattacker])
		cod_inflict_damage(idattacker, this, 10.0, 0.2, idinflictor, damagebits);
		
	return HAM_IGNORED;
}
