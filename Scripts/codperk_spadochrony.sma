/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <codmod>
#include <engine>
#include <fun>

#define MAX 20
new bool:ma_perk[MAX + 1];
new bool:uzywa[MAX + 1];
new pozostale_spadochrony[MAX + 1];

new para_ent[MAX + 1];

new const nazwa[] = "Spadochrony";
new const opis[] = "Dostajesz 3 spadochrony na spawn";

public plugin_init() 
{
	register_plugin(nazwa, "1.0", "QTM_Peyote");
	
	cod_register_perk(nazwa, opis);
	register_event("ResetHUD", "ResetHUD", "abe");
}

public plugin_precache()
	precache_model("models/parachute.mdl");

public cod_perk_enabled(id)
{
	COD_MSG_SKILL_D;
	show_hudmessage(id, "Aby uzyc spadochronu, bedac w powietrzu^nuzyj komendy useperk lub radio3");
	ma_perk[id] = true;
}
	
public cod_perk_disabled(id)
	ma_perk[id] = false;

public cod_perk_used(id)
{
	if(pozostale_spadochrony[id] > 0)
	{
		if(para_ent[id])
			uzywa[id] = false;
		else
		{
			uzywa[id] = true;
			pozostale_spadochrony[id]--;
			ShowAmmo(id);
		}
	}
	else
		client_print(id, print_center, "Wykorzystales juz wszystkie spadochrony !");
}
	
public client_PreThink(id)
{
	//parachute.mdl animation information
	//0 - deploy - 84 frames
	//1 - idle - 39 frames
	//2 - detach - 29 frames

	if (!is_user_alive(id) || !ma_perk[id]) return

	new Float:fallspeed = -100.0
	new Float:frame
	
	new flags = get_entity_flags(id)

	if (para_ent[id] > 0 && (flags & FL_ONGROUND)) {
		uzywa[id] = false;
		if (get_user_gravity(id) == 0.1) set_user_gravity(id, 1.0)

		if (entity_get_int(para_ent[id],EV_INT_sequence) != 2) {
			entity_set_int(para_ent[id], EV_INT_sequence, 2)
			entity_set_int(para_ent[id], EV_INT_gaitsequence, 1)
			entity_set_float(para_ent[id], EV_FL_frame, 0.0)
			entity_set_float(para_ent[id], EV_FL_fuser1, 0.0)
			entity_set_float(para_ent[id], EV_FL_animtime, 0.0)
			entity_set_float(para_ent[id], EV_FL_framerate, 0.0)
			return
		}

		frame = entity_get_float(para_ent[id],EV_FL_fuser1) + 2.0
		entity_set_float(para_ent[id],EV_FL_fuser1,frame)
		entity_set_float(para_ent[id],EV_FL_frame,frame)

		if (frame > 254.0) {
			remove_entity(para_ent[id])
			para_ent[id] = 0
		}
	}

	if (uzywa[id]) {

		new Float:velocity[3]
		entity_get_vector(id, EV_VEC_velocity, velocity)

		if (velocity[2] < 0.0) {

			if(para_ent[id] <= 0) {
				para_ent[id] = create_entity("info_target")
				if(para_ent[id] > 0) {
					entity_set_string(para_ent[id],EV_SZ_classname,"parachute")
					entity_set_edict(para_ent[id], EV_ENT_aiment, id)
					entity_set_edict(para_ent[id], EV_ENT_owner, id)
					entity_set_int(para_ent[id], EV_INT_movetype, MOVETYPE_FOLLOW)
					entity_set_model(para_ent[id], "models/parachute.mdl")
					entity_set_int(para_ent[id], EV_INT_sequence, 0)
					entity_set_int(para_ent[id], EV_INT_gaitsequence, 1)
					entity_set_float(para_ent[id], EV_FL_frame, 0.0)
					entity_set_float(para_ent[id], EV_FL_fuser1, 0.0)
				}
			}

			if (para_ent[id] > 0) {

				entity_set_int(id, EV_INT_sequence, 3)
				entity_set_int(id, EV_INT_gaitsequence, 1)
				entity_set_float(id, EV_FL_frame, 1.0)
				entity_set_float(id, EV_FL_framerate, 1.0)
				set_user_gravity(id, 0.1)

				velocity[2] = (velocity[2] + 40.0 < fallspeed) ? velocity[2] + 40.0 : fallspeed
				entity_set_vector(id, EV_VEC_velocity, velocity)

				if (entity_get_int(para_ent[id],EV_INT_sequence) == 0) {
					
					frame = entity_get_float(para_ent[id],EV_FL_fuser1) + 1.0
					entity_set_float(para_ent[id],EV_FL_fuser1,frame)
					entity_set_float(para_ent[id],EV_FL_frame,frame)

					if (frame > 100.0) {
						pozostale_spadochrony[id]--;
						entity_set_float(para_ent[id], EV_FL_animtime, 0.0)
						entity_set_float(para_ent[id], EV_FL_framerate, 0.4)
						entity_set_int(para_ent[id], EV_INT_sequence, 1)
						entity_set_int(para_ent[id], EV_INT_gaitsequence, 1)
						entity_set_float(para_ent[id], EV_FL_frame, 0.0)
						entity_set_float(para_ent[id], EV_FL_fuser1, 0.0)
					}
				}
			}
		}
		else if (para_ent[id] > 0) {
			remove_entity(para_ent[id])
			set_user_gravity(id, 1.0)
			para_ent[id] = 0
		}
	}
	else if (para_ent[id] > 0 ) {
		remove_entity(para_ent[id])
		set_user_gravity(id, 1.0)
		para_ent[id] = 0
	}
}
public ResetHUD(id)
{
	uzywa[id] = false;
	pozostale_spadochrony[id] = 3;
}

ShowAmmo(id)
{ 
    new ammo[51] 
    formatex(ammo, 50, "Liczba Spadochronow: %i/3",pozostale_spadochrony[id])

    message_begin(MSG_ONE, get_user_msgid("StatusText"), {0,0,0}, id) 
    write_byte(0) 
    write_string(ammo) 
    message_end() 
} 
