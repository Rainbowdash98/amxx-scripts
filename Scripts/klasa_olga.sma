/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cstrike>
#include <torreinc>
#include <engine>
#include <hamsandwich>
#include <fakemeta_util>
#include <acg>

#define TASK_PLANTING 841

new const nazwa[] = "Olga";
new const nazwa_kodowa[] = "Stunde";
new const opis[] = "Dostajesz mine Claymore ktora mozesz recznie lub automatycznie zdetonowac, inteligencja zwieksza dmg z pistoletow"
new const grawitacja = 20;
new const zdrowie = 0;
new const inteligencja = 0;
new const kondycja = 0;
new const wytrzymalosc = 0;
new const przeladowanie = 10;
new const regeneracja = 0;

#define MAX 20
enum {DETONATE_NONE = 0, MANUAL_DETONATE, SCAN_DETONATE}  // rodzaj detonacji
enum {PLANT_NONE = 0, PLANTING, PLANTED}
new bool: ma_klase[MAX+1], M18_planting[MAX+1], M18_detonate[MAX+1], ma_bron[MAX+1], sprite_blast, sprite_white, bool: freezetime, bool:uzyl[MAX+1];

new mapname[32];

public plugin_init() {
	register_plugin(nazwa, "0.3", "=ToRRent=")
	
	cod_register_class(nazwa, opis, grawitacja, zdrowie, kondycja, inteligencja, wytrzymalosc, przeladowanie, regeneracja, nazwa_kodowa);

	//RegisterHam(Ham_Item_Deploy, "weapon_p228", "Weapon_Deploy", 1);
	RegisterHam(Ham_Item_Deploy, "weapon_knife", "Weapon_Deploy_Knife", 1);
	RegisterHam(Ham_Spawn, "player", "Spawn", 1);
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	register_event("DeathMsg", "DeathEvent", "a");
	
	register_event("HLTV", "NowaRunda", "a", "1=0", "2=0");
	register_event("ResetHUD", "ResetHUD", "abe");
	register_logevent("PoczatekRundy", 2, "1=Round_Start"); 
	register_forward(FM_CmdStart, "CmdStart");
	//register_forward(FM_SetModel,"fwSetModel",1);
	
	register_think("claymore", "M18_Detonate_Scan");
	
	get_mapname(mapname, 31)
}

public cod_class_enabled(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		return COD_CONTINUE;
	}
	else
	{
		acg_drawtext(id, 0.04, 0.69, "Aby postawic na mapie mine Claymore^n wcisnij USE (Domyslnie E)", 0, 212, 255, 255, 0.0, 2.5, 4.5, 0, TS_NONE, 0, 1, 11)
	}
	//COD_MSG_SKILL_D;
	//show_hudmessage(id, "Aby polozyc Claymore, wcisnij USE (Domyslnie E)");
	ma_klase[id] = true;
	ma_bron[id] = true
	uzyl[id] = false
	M18_planting[id] = PLANT_NONE;
	M18_detonate[id] = DETONATE_NONE;
	//Odrodzenie(id)
	
	return COD_CONTINUE;
}

public cod_class_disabled(id)
{
	ma_klase[id] = false;
	uzyl[id] = true
	//fm_strip_user_gun(id, _, "weapon_p228")
	ma_bron[id] = false
}

public plugin_precache()
{
	//precache_model("models/QTM_CodMod/v_claymore.mdl")
	//precache_model("models/QTM_CodMod/p_claymore.mdl")
	precache_model("models/QTM_CodMod/w_claymore.mdl")
	precache_model("models/QTM_CodMod/v_claymore_radio.mdl")
	precache_sound("weapons/mine_charge.wav");
	precache_sound("weapons/mine_activate.wav");
	precache_sound("weapons/mine_deploy.wav");
	sprite_blast = precache_model("sprites/dexplo.spr");
	sprite_white = precache_model("sprites/white.spr") ;
}
public cod_class_skill_used(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		client_print(id, print_center, "Umiejetnosci klas nie sa dostepne w tym trybie gry !");
	}
	else
	{
		if (uzyl[id])
		{
			client_print(id, print_center, "Do dyspozycji masz tylko 1 mine na spawn !");
			return;
		}
	
		if(freezetime)
		{
			client_print(id, print_center, "Nie mozna postawic miny w trakcie freezetime!");
			return;
		}
	
		M18_planting[id] = PLANTED
		new Float:origin[3], Float:vAngle[3];
		entity_get_vector(id, EV_VEC_origin, origin);
		entity_get_vector(id, EV_VEC_v_angle, vAngle);
		
		new ent = create_entity("info_target");
		entity_set_string(ent ,EV_SZ_classname, "claymore");
		entity_set_edict(ent ,EV_ENT_owner, id);
		vAngle[0] = 0.0;
		entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
		entity_set_origin(ent, origin);
		entity_set_vector(ent, EV_VEC_angles, vAngle);
		entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
		entity_set_model(ent, "models/QTM_CodMod/w_claymore.mdl");
		drop_to_floor(ent);
		emit_sound(ent, CHAN_VOICE, "weapons/mine_charge.wav", 0.5, ATTN_NORM, 0, PITCH_NORM );
		emit_sound(ent, CHAN_ITEM, "weapons/mine_deploy.wav", 0.6, ATTN_NORM, 0, PITCH_NORM );
		M18_Menu(id)
		uzyl[id] = true;
		if(is_user_bot(id))
			M18_detonate[id] = SCAN_DETONATE
	}
}

public Spawn(id)
{
	if(is_user_connected(id))
		uzyl[id] = false;
}
/*public Odrodzenie(id)
{
	if(ma_klase[id] && ma_bron[id])
		fm_give_item(id, "weapon_p228")
}
public Weapon_Deploy(ent)
{
	new id = get_pdata_cbase(ent, 41, 4);
	if(ma_bron[id])
	{
		set_pev(id, pev_viewmodel2, "models/QTM_CodMod/v_claymore.mdl");
		set_pev(id, pev_weaponmodel2, "models/QTM_CodMod/p_claymore.mdl");
		set_pev(id, pev_weaponanim, 3);
	}
	return PLUGIN_CONTINUE;
}*/
public Weapon_Deploy_Knife(ent)
{
	new id = get_pdata_cbase(ent, 41, 4)
	if(ma_bron[id] && M18_detonate[id] == MANUAL_DETONATE)
	{
		set_pev(id, pev_viewmodel2, "models/QTM_CodMod/v_claymore_radio.mdl");
		set_pev(id, pev_weaponanim, 2);
	}
}

public CmdStart(id, uc_handle)
{	
	if(!is_user_alive(id))
		return PLUGIN_CONTINUE
		
	if(!is_user_connected(id))
		return PLUGIN_CONTINUE
		
	if(get_user_weapon(id) == CSW_KNIFE && M18_detonate[id] == MANUAL_DETONATE && get_uc(uc_handle, UC_Buttons) & IN_ATTACK)	
	{
		new M18_ent1 = find_ent_by_class(-1, "claymore");
		if(M18_ent1 && pev(M18_ent1, pev_owner) == id)
		{
			new entwpn = fm_find_ent_by_owner(-1, "weapon_knife", id)
			if(entwpn)
				set_pdata_float(entwpn, 48, 1.5+3.0, 4)
			set_pdata_float(id, 83, 1.5, 4)
			set_pev(id, pev_weaponanim, 3)
			M18_Detonate_Manual(M18_ent1)
		}
	}
	return FMRES_IGNORED
}
public ResetHUD(id)
{
	M18_detonate[id] = DETONATE_NONE;
	M18_planting[id] = PLANT_NONE;
}
/*public claymore_planting(id)
{
	id-=TASK_PLANTING
	
	M18_planting[id] = PLANTED
	new Float:origin[3], Float:vAngle[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	entity_get_vector(id, EV_VEC_v_angle, vAngle);
		
	new ent = create_entity("info_target");
	entity_set_string(ent ,EV_SZ_classname, "claymore");
	entity_set_edict(ent ,EV_ENT_owner, id);
	vAngle[0] = 0.0;
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_origin(ent, origin);
	entity_set_vector(ent, EV_VEC_angles, vAngle);
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	entity_set_model(ent, "models/QTM_CodMod/w_claymore.mdl");
	drop_to_floor(ent);
	emit_sound(ent, CHAN_VOICE, "weapons/mine_charge.wav", 0.5, ATTN_NORM, 0, PITCH_NORM );
	emit_sound(ent, CHAN_ITEM, "weapons/mine_deploy.wav", 0.6, ATTN_NORM, 0, PITCH_NORM );
	
	//new ent1 = fm_find_ent_by_owner(-1, "weapon_knife", id);
	if(ent1 && M18_planting[id] == PLANTED)
		fm_strip_user_gun(id, _, "weapon_p228")
	M18_Menu(id)
	
}*/
/*public fwSetModel(ent, model[])
{
	new id = pev(ent, pev_owner)
	if(M18_planting[id] != PLANTED)
		return FMRES_IGNORED
		
	new szClass[32];
	pev(ent, pev_classname,szClass, 31);
	if(equal(szClass,"weaponbox"))
	{
		if(!equal(model, "models/w_p228.mdl"))
			return FMRES_HANDLED;
		dllfunc(DLLFunc_Think, ent);	
	}
	return FMRES_IGNORED;
}*/
public M18_Menu(id)
{
	new menu = menu_create("Wybierz tryb detonacji Claymore:", "M18_Menu_Handle");
	menu_additem(menu, "Automatyczna (czujnik ruchu)");
	menu_additem(menu, "Reczna (detonator zamiast noza)");	
	menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	
	menu_display(id, menu);
}
public M18_Menu_Handle(id, menu, item)
{
	switch(item)
	{
		case 0: 
		{
			M18_detonate[id] = SCAN_DETONATE
			acg_drawtext(id, 0.04, 0.69, "Wybrales automatyczna detonacje!^nWybuch wyzwalany jest przez zblizenie sie wroga do miny!", 0, 212, 255, 255, 0.0, 2.5, 4.5, 0, TS_NONE, 0, 1, 12)
			//COD_MSG_SKILL_D;
			//show_hudmessage(id, "Wybrales automatyczna detonacje!^nWybuch wyzwalany jest przez zblizenie sie wroga do miny!")
			new m18 = find_ent_by_class(0, "claymore")
			if(m18)
				if(pev(m18, pev_owner) == id)
					entity_set_float(m18, EV_FL_nextthink, halflife_time() + 0.1);
		}
		case 1:
		{
			M18_detonate[id] = MANUAL_DETONATE;
			acg_drawtext(id, 0.04, 0.69, "Wybrales reczna detonacje!^nBy wyciagnac detonator, wybierz noz", 0, 212, 255, 255, 0.0, 2.5, 4.5, 0, TS_NONE, 0, 1, 12)
			//COD_MSG_SKILL_D;
			//show_hudmessage(id, "Wybrales reczna detonacje!^nBy otrzymac detonatora, wybierz noz i nacisnij LPM, aby zdetonowac mine!")
		}
	}
	client_cmd(id, "spk weapons/mine_activate.wav" );
	menu_destroy(menu);
	return PLUGIN_CONTINUE
}
public M18_Detonate_Manual(ent)
{
	entity_set_int(ent, EV_INT_iuser1, 1);
		
	new attacker = pev(ent, pev_owner);
	
	new Float:fOrigin[3], iOrigin[3];
	pev(ent, pev_origin, fOrigin);
	
	FVecIVec(fOrigin, iOrigin);
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
	write_byte(TE_EXPLOSION);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_short(sprite_blast);
	write_byte(32); 
	write_byte(20); 
	write_byte(0);
	message_end();
		
	new entlist[33];
	new numfound = find_sphere_class(ent,"player", 300.0 ,entlist, 32);
		
	for (new i=0; i < numfound; i++)
	{		
		new pid = entlist[i];
			
		if (!is_user_alive(pid) || get_user_team(attacker) == get_user_team(pid))
			continue;
				
		cod_inflict_damage(attacker, pid, 100.0, 1.0, ent, (1<<24));
	}
	M18_detonate[attacker] = DETONATE_NONE;
	remove_entity(ent);
	return PLUGIN_CONTINUE
}
public M18_Detonate_Scan(ent)
{
	if(!is_valid_ent(ent))
		return PLUGIN_CONTINUE;
		
	new attacker = pev(ent, pev_owner)
	new bool: bDetonate = false;
	
	if(M18_detonate[attacker] != SCAN_DETONATE)
		return PLUGIN_CONTINUE;
		
	if(entity_get_int(ent, EV_INT_iuser2))
		return PLUGIN_CONTINUE;
	
	entity_set_int(ent, EV_INT_iuser1, 1);
		
	new Float:fOrigin[3];
	entity_get_vector(ent, EV_VEC_origin, fOrigin);
	
	new entlist[33];
	new numfound = find_sphere_class(ent,"player", 300.0 ,entlist, 32);

	for (new i=0; i < numfound; i++)
	{
		new pid = entlist[i];
		new origin[3], Float: porigin[3];
		get_user_origin(entlist[i], origin);
		IVecFVec(origin, porigin);
		if (is_user_alive(pid) && get_user_team(attacker) != get_user_team(pid) && get_distance_f(porigin, fOrigin) <= 150.0)
		{
			new iOrigin[3];
			FVecIVec(fOrigin, iOrigin)
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
			write_byte(TE_EXPLOSION);
			write_coord(iOrigin[0]);
			write_coord(iOrigin[1]);
			write_coord(iOrigin[2]);
			write_short(sprite_blast);
			write_byte(32); 
			write_byte(20); 
			write_byte(0);
			message_end();
			bDetonate = true;
			break;
		}
	}
	if(bDetonate)
	{
		for (new i=0; i < numfound; i++)
		{
			new pid = entlist[i];
			new origin[3], Float: porigin[3];
			get_user_origin(entlist[i], origin);
			IVecFVec(origin, porigin);
			if (is_user_alive(pid) && get_user_team(attacker) != get_user_team(pid))
			{
				cod_inflict_damage(attacker, pid, 80.0, 0.5, ent, (1<<24));
			}
		}
		M18_detonate[attacker] = DETONATE_NONE;
		remove_entity(ent)
		return PLUGIN_CONTINUE;
	}
	new iOrigin[3];
	FVecIVec(fOrigin, iOrigin);
			
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, iOrigin );
	write_byte(TE_BEAMCYLINDER);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1] + 250);
	write_coord(iOrigin[2] + 250);
	write_short(sprite_white);
	write_byte(0); // startframe
	write_byte(0); // framerate
	write_byte(10); // life
	write_byte(10); // width
	write_byte(255); // noise
	write_byte(0); // r, g, b
	write_byte(100 );// r, g, b
	write_byte( 255 ); // r, g, b
	write_byte( 4); // brightness
	write_byte( 0 ); // speed
	message_end();

	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.3);	
	
	return PLUGIN_CONTINUE;
}
public NowaRunda()
{
	new ent = find_ent_by_class(-1, "claymore");
	while(ent > 0) 
	{
		M18_detonate[pev(ent, pev_owner)] = DETONATE_NONE
		M18_planting[pev(ent, pev_owner)] = PLANT_NONE
		remove_entity(ent);
		ent = find_ent_by_class(ent, "claymore");	
	}
	freezetime = true;
}
public client_disconnect(id)
{
	new ent = find_ent_by_class(0, "claymore");
	while(ent > 0)
	{
		if(pev(ent, pev_owner) == id)
			remove_entity(ent);
		ent = find_ent_by_class(ent, "claymore");
	}
}
public PoczatekRundy()	
{
	freezetime = false;
}

public TakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
		return HAM_IGNORED;
		
	if(!is_user_connected(idattacker))
		return HAM_IGNORED;
	
	if(!ma_klase[idattacker])
		return HAM_IGNORED;
	
	if(get_user_team(this) != get_user_team(idattacker) && (1<<get_user_weapon(idattacker)) & (1<<CSW_USP|1<<CSW_GLOCK18|1<<CSW_DEAGLE|1<<CSW_FIVESEVEN|1<<CSW_ELITE) && damagebits & DMG_BULLET)
		cod_inflict_damage(idattacker, this,1.0, 0.8, idinflictor, damagebits)
	
	return HAM_IGNORED;
}

public DeathEvent()
{
	new vid = read_data(2);
	set_task(3.0, "Usun", vid);
}

public Usun(id)
{
	new ent	    
	while((ent = fm_find_ent_by_owner(ent, "claymore", id)) != 0)
	{
		M18_detonate[id] = DETONATE_NONE
		M18_planting[id] = PLANT_NONE
		remove_entity(ent)
	}
}
