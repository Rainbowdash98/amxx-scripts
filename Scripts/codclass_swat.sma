/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cstrike>
#include <codmod>
#include <hamsandwich>
#include <fakemeta>

#define DMG_BULLET (1<<1)

new const nazwa[] = "SWAT";
new const opis[] = "Jest odporny na rakiety, ukrywa przyjaciol w promieniu 50u(+int), dostaje XP za ukrycie zabojcy";
new const bronie = 1<<CSW_UMP45 | 1<<CSW_HEGRENADE | 1<<CSW_SMOKEGRENADE;
new const zdrowie = 15;
new const kondycja = 15;
new const inteligencja = 5;
new const wytrzymalosc = 5;

new bool:ma_klase[33];
new jest_ukrywany[33];

new sprite_line;

new SyncHudObj;

public plugin_init() {
	register_plugin(nazwa, "1.0", "QTM_Peyote");
	
	cod_register_class(nazwa, opis, bronie, zdrowie, kondycja, inteligencja, wytrzymalosc);
	RegisterHam(Ham_TakeDamage, "info_target", "TakeDamage")
	register_forward(FM_AddToFullPack, "FwdAddToFullPack", 1);
	register_forward(FM_PlayerPreThink, "PreThink");
	register_event("DeathMsg", "Death", "ade");
	SyncHudObj = CreateHudSyncObj();
}

public plugin_precache()
	sprite_line = precache_model("sprites/dot.spr");
	
public cod_class_enabled(id)
{
	ma_klase[id] = true;
	//return COD_CONTINUE;
}
public cod_class_disabled(id)
{
	ma_klase[id] = false;
}
public TakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(!is_user_connected(idattacker))
		return HAM_IGNORED; 
	
	if(!ma_klase[idattacker])
		return HAM_IGNORED;
		
	if(!is_user_alive(idattacker))
                return HAM_IGNORED;
                
	new classname[32]
	pev(this, pev_classname, classname, 31);
        
	if(equal(classname, "rocket"))
		return HAM_SUPERCEDE;

		//return HAM_IGNORED;	
	
	if(damagebits & DMG_BULLET)
	{
		new weapon = get_user_weapon(idattacker);
		
		if(weapon == CSW_UMP45)
		cod_inflict_damage(idattacker, this, 3.0, 0.1, idinflictor, damagebits);
	}
	
	return HAM_IGNORED;
}	

public Death()
{
	new killer = read_data(1);
	new victim = read_data(2);
	
	if(!is_user_connected(killer)) return;
	
	if(!jest_ukrywany[killer]) return;
	
	new xp;
	if(cod_get_user_level(victim) > cod_get_user_level(jest_ukrywany[killer])) 
	{
		xp = (cod_get_user_level(victim)-cod_get_user_level(killer))+5
	}
	else
	{
		xp = 5
	}
	
	cod_set_user_xp(jest_ukrywany[killer], cod_get_user_xp(jest_ukrywany[killer])+xp);
	
	COD_MSG_EXP_P;
	ShowSyncHudMsg(jest_ukrywany[killer], SyncHudObj, "+%i za ukrywanie gracza, ktory zabil wroga!", xp);
		
}
public PreThink(id)
{
	if(!is_user_alive(id))
		return;
	
	if(!ma_klase[id])
		return;
	
	new Float:origin[3], Float:dist = cod_get_user_intelligence(id)*0.5+50.0;
	
	pev(id, pev_origin, origin);
	static Float:zmiana[33];
		
	zmiana[id] += 0.5;
	if(zmiana[id] > 360.0)
		zmiana[id] = 0.0;
		
	new LineBegin[3], LineEnd[3];
	
	for(new i = 0; i < 2; i++)
	{
		LineBegin[0] = floatround(origin[0]-floatsin(zmiana[id]+i*90.0, degrees)*dist);
		LineBegin[1] = floatround(origin[1]-floatcos(zmiana[id]+i*90.0, degrees)*dist);
		LineBegin[2] = floatround(origin[2]);
				
		LineEnd[0] = floatround(origin[0]+floatsin(zmiana[id]+i*90.0, degrees)*dist);
		LineEnd[1] = floatround(origin[1]+floatcos(zmiana[id]+i*90.0, degrees)*dist);
		LineEnd[2] = floatround(origin[2]);
		
		for(new i = 0; i <= 32; i++)
		{
			if(!is_user_connected(i))
				continue;
				
			if(get_user_team(i) != get_user_team(id))
				continue;
				
			Create_Line(i, LineBegin, LineEnd);
		}
	}
			

	arrayset(jest_ukrywany, 0, 33);
	
	new index = -1;
	while((index = engfunc(EngFunc_FindEntityInSphere, index, origin, dist))) 
	{
		if(!is_user_alive(index))
			continue;
		
		if(get_user_team(index) != get_user_team(id) || ma_klase[index])
			continue;
			
		COD_MSG_SKILL_K;
		ShowSyncHudMsg(index, SyncHudObj, "Jestes ukryty!^n Nie strzelaj, aby pozostac niezauwazonym.")
		
		jest_ukrywany[index] = id;

	}
	
}

public FwdAddToFullPack(es_handle, e, ent, host, hostflags, player, pSet)
{
	if(!player)
		return;
	
	if(pev(ent, pev_button) & IN_ATTACK)
		return;
		
			
	if(ma_klase[ent])
	{
		set_es(es_handle, ES_RenderMode, kRenderTransAdd);
		set_es(es_handle, ES_RenderFx, kRenderFxGlowShell);
		set_es(es_handle, ES_RenderColor, {0, 100, 255});
		set_es(es_handle, ES_RenderAmt, 10);
		return;
	}
	
	if(!jest_ukrywany[ent])
		return;
	
	if(get_user_team(ent) == get_user_team(host))
	{
		set_es(es_handle, ES_RenderMode, kRenderTransAdd);
		set_es(es_handle, ES_RenderAmt, 50);
		return;
	}
	
	set_es(es_handle, ES_Effects, EF_NODRAW);
}


public Create_Line(id, start[], stop[])
{
	message_begin(MSG_ONE,SVC_TEMPENTITY,{0,0,0},id)
	write_byte(0)
	write_coord(start[0])
	write_coord(start[1])
	write_coord(start[2])
	write_coord(stop[0])
	write_coord(stop[1])
	write_coord(stop[2])
	write_short(sprite_line)
	write_byte(1)
	write_byte(5)
	write_byte(1)
	write_byte(3)
	write_byte(0)
	write_byte(0)	// RED
	write_byte(100)	// GREEN
	write_byte(255)	// BLUE					
	write_byte(255)	// brightness
	write_byte(5)
	message_end()
}
