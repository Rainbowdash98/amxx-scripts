/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <fakemeta_util>
#include <engine>
#include <hamsandwich>
#include <torreinc>
#include <acg>

#define nazwa "Mariusz"
#define nazwa_kodowa "Wylaczyc Monitory"
#define opis "Co runde dostaje 2 kamery ktorymi moze podgladac, 1/9 szans na oslepienie"
#define grawitacja 0
#define zdrowie 0
#define kondycja 0
#define inteligencja 20
#define wytrzymalosc 5
#define przeladowanie 0
#define regeneracja 5

#define ILOSC_KAMER 2
#define WYTRZYMALOSC_KAMER 200

#define ZADANIE_AKTYWUJ 95967421

#define MAX 20

new sprite_blast;

new ilosc_kamer_gracza[MAX + 1];

new bool:ma_klase[MAX + 1];
new kamera_gracza[MAX + 1];

//new g_msg_screenfade;
new mapname[32];

public plugin_init()
 {
	register_plugin(nazwa, "1.0", "QTM_Peyote");
	
	cod_register_class(nazwa, opis, grawitacja, zdrowie, kondycja, inteligencja, wytrzymalosc, przeladowanie, regeneracja, nazwa_kodowa);
	
	RegisterHam(Ham_TraceAttack, "worldspawn", "TraceAttack");
	register_event("HLTV", "NowaRunda", "a", "1=0", "2=0");
	//RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	//RegisterHam(Ham_TakeDamage, "info_target", "TakeDamage");
	RegisterHam(Ham_Spawn, "player", "Spawn", 1);
	register_touch("camera", "*", "DotykKamery");
	register_forward(FM_UpdateClientData, "UpdateData", 1);
	register_forward(FM_PlayerPreThink, "PreThink");
	register_event("DeathMsg", "Death", "ade");
	register_event("Damage", "Damage", "b", "2!=0");	
	register_clcmd("radio3", "ZmienKamere");
	
	//g_msg_screenfade = get_user_msgid("ScreenFade");
	get_mapname(mapname, 31)
}

public plugin_precache()
{
	sprite_blast = precache_model("sprites/dexplo.spr");
	precache_model("models/QTM_CodMod/camera.mdl");
	precache_sound("weapons/mine_charge.wav");
	precache_sound("weapons/mine_activate.wav");
	precache_sound("weapons/mine_deploy.wav");
	precache_sound("events/search.wav");
}

public cod_class_enabled(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		return COD_CONTINUE;
	}
	else
	{
		acg_drawtext(id, 0.04, 0.69, "Aby wystrzelic kamere^nnaceluj i wcisnij USE (domyslnie E)", 0, 212, 255, 255, 0.0, 2.5, 4.5, 0, TS_NONE, 0, 1, 11)
	}
	//COD_MSG_SKILL_D;
	//show_hudmessage(id, "Aby wystrzelic kamere naceluj i wcisnij USE (domyslnie E)");
	kamera_gracza[id] = 0;
	ma_klase[id] = true;
	
	return COD_CONTINUE;
}

public cod_class_disabled(id)
	ma_klase[id] = false;

public PreThink(id)
{
	if(!ma_klase[id]) return;
	
	if(!pev_valid(kamera_gracza[id])) return;
	
	set_pev(id, pev_button, 0);
	set_pev(id, pev_velocity , Float:{0.0, 0.0, 0.0});
}

public cod_class_skill_used(id)
{
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
	{
		client_print(id, print_center, "Umiejetnosci klas nie sa dostepne w tym trybie gry !");
	}
	else
	{
		if (!ilosc_kamer_gracza[id])
		{
			client_print(id, print_center, "Wykorzystales juz wszystkie kamery !");
			return PLUGIN_CONTINUE;
		}
	
		if (is_user_alive(id))
		{
			ilosc_kamer_gracza[id]--;

			new Float: Origin[3], Float: vAngle[3], Float: Velocity[3];
		
			pev(id, pev_v_angle, vAngle);
			pev(id, pev_origin , Origin);
	
			new Ent = create_entity("info_target");
		
			set_pev(Ent, pev_classname, "camera");
			entity_set_model(Ent, "models/QTM_CodMod/camera.mdl");
	
			vAngle[0] *= -1.0;
	
			set_pev(Ent, pev_origin, Origin);
			set_pev(Ent, pev_angles, vAngle);
	
			set_pev(Ent, pev_effects, 2);
			set_pev(Ent, pev_solid, SOLID_BBOX);
			set_pev(Ent, pev_movetype, MOVETYPE_FLY);
			set_pev(Ent, pev_owner, id);
			set_pev(Ent, pev_health, WYTRZYMALOSC_KAMER.0);
			set_pev(Ent, pev_takedamage, DAMAGE_YES);
		
			velocity_by_aim(id, 1000 , Velocity);
			set_pev(Ent, pev_velocity ,Velocity);
			client_cmd(id, "spk events/search.wav")
			ShowAmmo(id);
		}
	}
	return PLUGIN_CONTINUE;
}

public DotykKamery(ent, id)
{
	new attacker = pev(ent, pev_owner);
	
	if(is_user_alive(id) && get_user_team(id) != get_user_team(attacker))
		cod_inflict_damage(attacker, id, 1.0, 1.0, ent, (1<<24));
		
	else if(!pev_valid(id))
	{
		set_pev(ent, pev_movetype, MOVETYPE_NONE);
		
		new Float:CameraOrigin[3], Float:CameraAngleVector[3];
	
		pev(ent, pev_origin, CameraOrigin);
		pev(ent, pev_angles, CameraAngleVector);
		angle_vector(CameraAngleVector, ANGLEVECTOR_FORWARD, CameraAngleVector);
	
		for(new i = 0; i < 3; i++)
			CameraOrigin[i] += -CameraAngleVector[i]*5.0;
			
		set_pev(ent, pev_origin, CameraOrigin);
		//COD_MSG_SKILL_D;
		acg_drawtext(id, 0.04, 0.69, "Aby ogladac obraz z kamer^nuzyj komendy radio3 (Domyslnie C)", 0, 212, 255, 255, 0.0, 3.0, 3.5, 0, TS_NONE, 0, 1, 12)
		//show_hudmessage(attacker, "Aby ogladac obraz z kamer^nuzyj komendy radio2")
		emit_sound(ent, CHAN_VOICE, "weapons/mine_charge.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
		emit_sound(ent, CHAN_ITEM, "weapons/mine_deploy.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
		set_task(0.5, "Aktywuj", ent+ZADANIE_AKTYWUJ);
	}
}	

public Aktywuj(ent)
{
	ent -= ZADANIE_AKTYWUJ;
	if(pev_valid(ent))
	{
		emit_sound(ent, CHAN_VOICE, "weapons/mine_activate.wav", 0.045, ATTN_NORM, 0, PITCH_NORM );
	}
}

public Death()
{
	new vid = read_data(2);
	set_task(3.0, "Usun", vid);
}
	
public Usun(id)
{
	new ent	    
	while((ent = fm_find_ent_by_owner(ent, "camera", id)) != 0)
		fm_remove_entity(ent)
}
	
public client_disconnect(id)
{
	new entkam = find_ent_by_class(0, "camera");
	while(entkam > 0)
	{
		if(entity_get_edict(entkam, EV_ENT_owner) == id)
			remove_entity(entkam);
		entkam = find_ent_by_class(entkam, "camera");
	}

}

public NowaRunda()
{
	new entkam = find_ent_by_class(-1, "camera");
	while(entkam > 0)
	{
		remove_entity(entkam);
		entkam = find_ent_by_class(entkam, "camera");
	}       
}
	
public Spawn(id)
{
	if(!is_user_alive(id) || !is_user_connected(id))
		return PLUGIN_CONTINUE;
		
	if(ma_klase[id])
		ilosc_kamer_gracza[id] = ILOSC_KAMER;
	
	return PLUGIN_CONTINUE;
}	

public UpdateData(id, sw, cd_handle)
{
	if(!ma_klase[id]) return;
	
	if(!pev_valid(kamera_gracza[id]) || pev(kamera_gracza[id], pev_movetype) != MOVETYPE_NONE || task_exists(kamera_gracza[id]+ZADANIE_AKTYWUJ))
		return;
	
	new Float:CameraOrigin[3], Float:vAngle[3];
	
	pev(kamera_gracza[id], pev_origin, CameraOrigin);
	pev(id, pev_v_angle, vAngle);
	vAngle[1] -= 180.0;
	set_pev(kamera_gracza[id], pev_angles, vAngle);
	
	set_cd(cd_handle, CD_Origin, CameraOrigin);
	set_cd(cd_handle, CD_Velocity, Float:{0.0, 0.0, 0.0});
	set_cd(cd_handle, CD_ViewModel, "");
	set_cd(cd_handle, CD_ViewOfs, Float:{0.0, 0.0, 0.0});
}

public ZmienKamere(id)
{
	if(!ma_klase[id]) return PLUGIN_CONTINUE;
	
	kamera_gracza[id] = find_ent_by_owner(kamera_gracza[id], "camera", id);
	return PLUGIN_HANDLED;
}

public TraceAttack(this, idattacker, Float:damage, Float:direction[3], tracehandle, damagebits)
{
	new Float:Origin[3];
	
	get_tr2(tracehandle, TR_vecEndPos, Origin);
	
	new entlist[2];
	new numfound = find_sphere_class(0, "camera", 15.0, entlist, 1, Origin);
	
	if(numfound)
	{
		new owner = pev(entlist[0], pev_owner);
		
		if(get_user_team(idattacker) == get_user_team(owner))
			return;
			
		new Health = pev(entlist[0], pev_health);
		if(Health < damage)
		{
			new iOrigin[3];
			FVecIVec(Origin, iOrigin);
			message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
			write_byte(TE_EXPLOSION);
			write_coord(iOrigin[0]);
			write_coord(iOrigin[1]);
			write_coord(iOrigin[2]);
			write_short(sprite_blast);
			write_byte(32); 
			write_byte(20); 
			write_byte(0);
			message_end();
			
			new entlist2[33];
			new numfound2 = find_sphere_class(entlist[0], "player", 190.0, entlist2, 32);
			
			
			for (new i=0; i < numfound2; i++)
			{		
				new pid = entlist2[i];
				
				if (!is_user_alive(pid) || get_user_team(owner) == get_user_team(pid))
					continue;
				cod_inflict_damage(owner, pid, 50.0, 0.89, entlist[0], (1<<24));
			}
		}
		ExecuteHam(Ham_TakeDamage, entlist[0], idattacker, idattacker, damage, damagebits);
	}
}

public Damage(id)
{
	new idattacker = get_user_attacker(id);
	
	if(equali(mapname, "gg_", 3) || equali(mapname, "aim_", 4) || equali(mapname, "fun_", 4) || equali(mapname, "awp_", 4))
		return PLUGIN_CONTINUE;
		
	if(!is_user_connected(idattacker) || get_user_team(id) == get_user_team(idattacker))
		return PLUGIN_CONTINUE;
	
	if(ma_klase[idattacker] && random_num(1, 9) == 1)
		acg_screenfade(id, 0, 0, 0, 125, 1.0, 0.0, 0.6)
		//Display_Fade(id, 1<<12, 1<<12 ,1<<16, 0, 0, 0, 150);
	
	return PLUGIN_CONTINUE;
}

ShowAmmo(id)
{ 
    new ammo[51] 
    formatex(ammo, 50, "Liczba Kamer: %i/2",ilosc_kamer_gracza[id])

    message_begin(MSG_ONE, get_user_msgid("StatusText"), {0,0,0}, id) 
    write_byte(0) 
    write_string(ammo) 
    message_end() 
} 

/*stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
	if(!is_user_connected(id))
		return;
		
	message_begin( MSG_ONE, g_msg_screenfade,{0,0,0},id );
	write_short( duration );
	write_short( holdtime );	
	write_short( fadetype );	
	write_byte ( red );		
	write_byte ( green );		
	write_byte ( blue );	
	write_byte ( alpha );	
	message_end();
}*/
