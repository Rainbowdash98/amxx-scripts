/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <fakemeta>
#include <hamsandwich>
#include <csx>
#include <nvault>
#include <cstrike>
#include <ColorChat>
#include <engine>
#include <dhudmessage>

#define PLUGIN "Achievements"
#define VERSION "1.12"
#define AUTHOR "Fili:P"

#define DHUD_INFO set_dhudmessage(255, 255, 85, -1.0, 0.17, 2, 4.0, 10.0, 0.02, 2.0, false)
#define DHUD_INFO2 set_dhudmessage(255, 255, 255, -1.0, 0.21, 0, 4.0, 10.0, 0.5, 2.0, false)

new AchValue;
new Array:AchStance[33];
new Array:AchStatus[33];
new Array:AchTarget;
new Array:AchName;
new Array:AchDesc;

new g_ForwardOne;

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	register_clcmd("say /ach", "AchMenu");
	register_clcmd("say_team /ach", "AchMenu");
	
	RegisterHam(Ham_Killed, "player", "HamCheck", 0);
	RegisterHam(Ham_Spawn, "player", "HamSpawn", 1);
	
	register_cvar("ach_display_gz", "1"); // czy wyswietlac gratulacje zdobyles %s ?
	
	AchTarget = ArrayCreate(1, 1);
	AchName = ArrayCreate(32, 1);
	AchDesc = ArrayCreate(256, 1);
	
	g_ForwardOne = CreateMultiForward("ach_give_reward", ET_CONTINUE, FP_CELL, FP_CELL);
	AchValue = nvault_open("Achievements");
	
	if (AchValue == INVALID_HANDLE)
		set_fail_state( "Nie moge otworzyc pliku!");
}
public plugin_natives()
{
	register_library("achievements");
	
	register_native("ach_get_index", "_ach_get_index");
	register_native("ach_get_stance", "_ach_get_stance"); // pobiera czy ach zaliczony czy nie
	register_native("ach_get_status", "_ach_get_status"); // pobiera postep w achu
	register_native("ach_get_desc", "_ach_get_desc"); // pobiera do talibyc opis acha o konkretnym id
	register_native("ach_get_name", "_ach_get_name"); // pobiera do tablicy nazwe acha o konkretnym id
	register_native("ach_get_target", "_ach_get_target"); // pobiera wymagana ilosc do zakonczenia acha
	register_native("ach_get_max", "_ach_get_max"); // pobiera ilosc achievementow (ACH_NUM)
	register_native("ach_set_name", "_ach_set_name"); // ustawia nazwe acha
	register_native("ach_set_desc", "_ach_set_desc"); // ustawia opis acha
	register_native("ach_set_target", "_ach_set_target"); // ustawia cel acha
	register_native("ach_set_stance", "_ach_set_stance"); // ustawia czy gracz ukonczyl acha
	register_native("ach_set_status", "_ach_set_status"); // ustawia postep w achu
	register_native("ach_add", "_ach_add"); // tworzy nowy ach
	register_native("ach_reset_status", "_ach_reset_status"); // ustawia AchStatus[id][aid] na 0
	register_native("ach_add_status", "_ach_add_status"); // dodaje postep w achu
}
public plugin_end() 
{
	nvault_close(AchValue);
}

public plugin_precache()
	precache_sound("TM_CodMod/ach.wav");
	
public client_authorized(id)
{
	AchStance[id]=ArrayCreate(1,1);
	AchStatus[id]=ArrayCreate(1,1);
	
	for(new i=0; i<ArraySize(AchTarget); i++)
	{
		ArrayPushCell(AchStance[id], 0);
		ArrayPushCell(AchStatus[id], 0);
		//load_nvault(id, i)
	}
}
public client_disconnect(id)
{
	for(new i=0; i<ArraySize(AchTarget); i++)
	{
		save_nvault(id, i)
	}
	ArrayDestroy(AchStatus[id]);
	ArrayDestroy(AchStance[id]);
}
public AchMenu(id)
{
	new AchM = menu_create("Osiagniecia", "AchMenuHandle");
	
	for(new i=0; i<ArraySize(AchTarget); i++)
	{
		if(is_user_connected(id))
		{
			new message[128];
			new iAchName[64];
			new iAchStance = ArrayGetCell(AchStance[id], i);
			new iAchStatus = ArrayGetCell(AchStatus[id], i);
			ArrayGetString(AchName, i, iAchName, 63);
			if(!iAchStance)
				format(message, 127, "\w%s \t\y%d/%d", iAchName, iAchStatus, ArrayGetCell(AchTarget, i))
			if(iAchStance)
				format(message, 127, "\w%s \t\rZaliczone!", iAchName)
			
			menu_additem(AchM, message, "");
		}
	}
	menu_display(id, AchM, 0);
	return PLUGIN_HANDLED;
}
public AchMenuHandle(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED
	}
	else if(is_user_connected(id) && item > -1 && item < ArraySize(AchTarget))
	{
		new iAchDesc[256];
		ArrayGetString(AchDesc, item, iAchDesc, 255);
		new iAchStance = ArrayGetCell(AchStance[id], item);
		new iAchStatus = ArrayGetCell(AchStatus[id], item);
		
		if(!iAchStance)
			ColorChat(id, NORMAL, "^x04[Osiagniecia] ^x01%s ^x04%d/%d", iAchDesc, iAchStatus, ArrayGetCell(AchTarget, item))
		if(iAchStance)
			ColorChat(id, NORMAL, "^x04[Osiagniecia] ^x01%s ^x04Zaliczone!", iAchDesc)
		
		menu_display(id, menu, 0);
	}
	return PLUGIN_HANDLED;
}
// ham
public HamSpawn(id)
{
	if(is_user_connected(id))
	{
		for(new i=0; i<ArraySize(AchTarget); i++)
		{
			load_nvault(id, i);
		}
	}
}
public HamCheck(id)
{	
	if(is_user_connected(id))
	{
		check_all_ach(id);
		for(new i=0; i<ArraySize(AchTarget); i++)
		{
			save_nvault(id, i);
		}
	}
}
//natywy
public _ach_get_index(plugin, params)
{
	//if(params != 1)
	//return 0;
	new szAchName[32];
	new zwroc;
	get_string(1, szAchName, 31);
	for(new i; i<ArraySize(AchTarget); i++)
	{
		new szAchName2[31];
		ArrayGetString(AchName, i, szAchName2, 31);
		if(equal(szAchName2, szAchName))
			zwroc = 1;
	}
	return zwroc;
}
public _ach_get_max(plugin, params)
{
	if(params != 0)
		return 0;
	
	return ArraySize(AchTarget);
}
public _ach_get_stance(plugin, params)
{
	if(params != 2)
	{
		return 0;
	}
	new id = get_param(1);
	new ach_id = get_param(2);
	return ArrayGetCell(AchStance[id],ach_id);
}
public _ach_get_status(plugin, params)
{
	if(params != 2)
	{
		return 0;
	}
	new id = get_param(1);
	new ach_id = get_param(2);
	return ArrayGetCell(AchStatus[id],ach_id);
}
public _ach_get_target(plugin, params)
{
	if(params != 1)
	{
		return 0;
	}
	new ach_id = get_param(1);
	return ArrayGetCell(AchTarget, ach_id);
}
public _ach_get_name(plugin, params)
{
	if(params != 3)
	{
		return 0;
	}
	new ach_id = get_param(1);
	new iAchName[64];
	ArrayGetString(AchName, ach_id, iAchName, 63);
	set_string(2, iAchName, get_param(3));
	return 1;
}
public _ach_get_desc(plugin, params)
{
	if(params != 3)
	{
		return 0;
	}
	new ach_id = get_param(1);
	new iAchDesc[64];
	ArrayGetString(AchDesc, ach_id, iAchDesc, 63);
	set_string(2, iAchDesc, get_param(3));
	return 1;
}
public _ach_set_name(plugins, params)
{
	if(params != 2)
	{
		return 0;
	}
	new ach_id = get_param(1);
	new ach_name[64];
	get_string(2, ach_name, 63);
	ArraySetString(AchName, ach_id, ach_name);
	return 1;
}
public _ach_set_desc(plugins, params)
{
	if(params != 2)
	{
		return 0;
	}
	new ach_id = get_param(1);
	new ach_desc[256];
	get_string(2, ach_desc, 255);
	ArraySetString(AchDesc, ach_id, ach_desc);
	return 1;
}
public _ach_set_target(plugins, params)
{
	if(params != 2)
	{
		return 0;
	}
	new ach_id = get_param(1);
	new ach_target = get_param(2);
	ArraySetCell(AchTarget,ach_id,ach_target);
	return 1;
}
public _ach_set_stance(plugin, params)
{
	if(params != 3)
	{
		return 0;
	}
	new id = get_param(1);
	new ach_id = get_param(2);
	new value = get_param(3);
	if(value!=0 && value!=1)
	{
		log_amx("Value musi byc rowne 0 lub 1");
		return 0;
	}
	ArraySetCell(AchStatus[id],ach_id, value);	
	return 1;
}
public _ach_set_status(plugin, params)
{
	if(params != 3)
	{
		return 0;
	}
	new id = get_param(1);
	new ach_id = get_param(2);
	new value = get_param(3);
	if(value<0 || ArrayGetCell(AchTarget,ach_id)<value)
	{
		return 0;	
	}
	ArraySetCell(AchStatus[id], ach_id, value);
	return 1;
}
public _ach_add(plugin, params)
{
	if(params != 3)
	{
		return 0;
	}
	new szAchName[64];
	new szAchDesc[256];
	new iAchTarget = get_param(3);
	get_string(1, szAchName, 63);
	get_string(2, szAchDesc, 255);
	ArrayPushString(AchName, szAchName);
	ArrayPushString(AchDesc, szAchDesc);
	ArrayPushCell(AchTarget, iAchTarget);
	/*for(new i=1; i<33; i++)
{
	ArrayPushCell(AchStatus[i], 0)
	ArrayPushCell(AchStance[i], 0);
}*/
	return ArraySize(AchTarget)-1;
}
public _ach_reset_status(plugin, params)
{
	if(params != 2)
	{
		return 0;
	}
	ArraySetCell(AchStatus[get_param(1)], get_param(2), 0);
	
	return 1;
}

public _ach_add_status(plugin, params)
{
	new arg1 = get_param(1);
	new arg2 = get_param(2);
	new arg3 = get_param(3);
	ArraySetCell(AchStatus[arg1], arg2, ArrayGetCell(AchStatus[arg1] , arg2) + arg3);
	
	return 1;
}
// stocki
stock check_ach(pid, aid)
{
	if(ArrayGetCell(AchStatus[pid], aid) >= ArrayGetCell(AchTarget, aid) && !ArrayGetCell(AchStance[pid], aid) && is_user_connected(pid))
	{
		ArraySetCell(AchStance[pid], aid, 1);
		new iAchName[64];
		ArrayGetString(AchName, aid, iAchName, 63);
		if(get_cvar_num("ach_display_gz"))
		{
			DHUD_INFO;
			show_dhudmessage(pid, "Zdobyles Osiagniecie !")
			DHUD_INFO2;
			show_dhudmessage(pid, "%s", iAchName);
			//ColorChat(pid, NORMAL, "^x04[Osiagniecia] Zdobyles osiagniecie ^x04^"%s^"^x01!", iAchName)
			client_cmd(pid, "spk TM_CodMod/ach");
		}
		new iRet;
		ExecuteForward(g_ForwardOne, iRet, pid, aid);
	}
}
stock check_all_ach(pid)
{
	for(new i=0; i<ArraySize(AchTarget); i++)
	{
		check_ach(pid, i);
	}
}
stock load_nvault(index, ach_id)
{
	if(is_user_connected(index))
	{
		new name[35]
		get_user_name(index,name,34)
		new vaultkey[64],vaultdata[256]
		format(vaultkey,63,"%s-%d-ach",name, ach_id)
		format(vaultdata,255,"%d#%d#",ArrayGetCell(AchStatus[index], ach_id) , ArrayGetCell(AchStance[index], ach_id))
		nvault_get(AchValue,vaultkey,vaultdata,255) 
		
		replace_all(vaultdata, 255, "#", " ") 
		
		new ach_status[33], ach_stance[33];
		parse(vaultdata,ach_status,32,ach_stance,32) 
		
		ArraySetCell(AchStatus[index], ach_id, str_to_num(ach_status));
		ArraySetCell(AchStance[index], ach_id, str_to_num(ach_stance));
		// return PLUGIN_CONTINUE;
	}
}  
stock save_nvault(index, ach_id)
{
	if(is_user_connected(index))
	{
		new name[35]
		get_user_name(index,name,34)
		new vaultkey[64],vaultdata[256] 
		format(vaultkey,63,"%s-%d-ach",name, ach_id) 
		format(vaultdata,255,"%d#%d#", ArrayGetCell(AchStatus[index], ach_id), ArrayGetCell(AchStance[index], ach_id)) 
		
		nvault_set(AchValue,vaultkey,vaultdata)   
	}
}
